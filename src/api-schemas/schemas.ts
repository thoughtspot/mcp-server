import { z } from "zod";

export const PingSchema = z.object({});

export const GetRelevantQuestionsSchema = z.object({
    query: z.string().describe("The query to get relevant data questions for, this could be a high level task or question the user is asking or hoping to get answered. You can pass the complete raw query as the system is smart to make sense of it."),
    additionalContext: z.string()
        .describe("Additional context to add to the query, this might be older data returned for previous questions or any other relevant context that might help the system generate better questions.")
        .optional(),
    datasourceIds: z.array(z.string())
        .describe("The datasources to get questions for, these are the ids of the datasources to get data from")
        .optional()
});

export const GetRelevantDataSchema = z.object({
    query: z.string().describe("The query to get relevant data for, this could be a high level task or question the user is asking or hoping to get answered. You can pass the complete raw query as the system is smart to make sense of it."),
    datasourceId: z.string()
        .describe("The datasource to get data from, this is the id of the datasource to get data from")
        .optional()
});

export const GetAnswerSchema = z.object({
    question: z.string().describe("The question to get the answer for, these are generally the questions generated by the getRelevantQuestions tool."),
    datasourceId: z.string()
        .describe("The datasource to get the answer for, this is the id of the datasource to get data from")
});

export const CreateLiveboardSchema = z.object({
    name: z.string().describe("The name of the liveboard to create"),
    answers: z.array(z.object({
        question: z.string(),
        session_identifier: z.string(),
        generation_number: z.number(),
    })).describe("The answers to create the liveboard from, these are the answers generated by the getAnswer tool."),
});

export enum ToolName {
    Ping = "ping",
    GetRelevantQuestions = "getRelevantQuestions",
    GetAnswer = "getAnswer",
    CreateLiveboard = "createLiveboard",
    // Note: GetRelevantData is a method in MCPServer but not explicitly listed as a tool for OpenAPI generation in handlers.ts
    // If it should be exposed, it needs to be added to the ToolName enum and handled in ListTools and CallTool in mcp-server.ts,
    // and also in the openapi spec generation in handlers.ts
}

export const toolDefinitions = [
    {
        name: ToolName.Ping,
        description: "Simple ping tool to test connectivity and Auth",
        schema: PingSchema,
    },
    {
        name: ToolName.GetRelevantQuestions,
        description: "Get relevant data questions from ThoughtSpot database",
        schema: GetRelevantQuestionsSchema,
    },
    {
        name: ToolName.GetAnswer,
        description: "Get the answer to a question from ThoughtSpot database",
        schema: GetAnswerSchema,
    },
    {
        name: ToolName.CreateLiveboard,
        description: "Create a liveboard from a list of answers",
        schema: CreateLiveboardSchema,
    }
]; 