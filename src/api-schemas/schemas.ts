import { ToolSchema } from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";
import { ToolName } from "../servers/mcp-server";
import { zodToJsonSchema } from "zod-to-json-schema";

export const PingSchema = z.object({});

const ToolInputSchema = ToolSchema.shape.inputSchema;
export type ToolInput = z.infer<typeof ToolInputSchema>;

const ToolOutputSchema = ToolSchema.shape.outputSchema;
export type ToolOutput = z.infer<typeof ToolOutputSchema>;

export const SearchInputSchema = z.object({
    query: z.string().describe(`The question/task to search for relevant data queries to answer. Use the fetch tool to retrieve the data for individual queries. The datasource id should be passed as part of the query. With the syntax 
    datasource:<id> <search-query>. The search-query can be any textual question.
        
        For example:
                    datasource:asdhshd-123123-12dd How to reduce customer churn?
                    datasource:abc-123123-12dd How to increase sales?
                
                If the datasource id is not available, ask the user to supply one explicitly.`),
});

export const SearchOutputSchema = z.object({
    results: z.array(z.object({
        id: z.string().describe("The id of the search result."),
        title: z.string().describe("The title of the search result."),
        text: z.string().describe("The text of the search result."),
        url: z.string().describe("The url of the search result."),
    })),
});

export const fetchInputSchema = z.object({
    id: z.string().describe("The id of the search result to fetch."),
});

export const fetchOutputSchema = z.object({
    id: z.string().describe("The id of the search result."),
    title: z.string().describe("The title of the search result."),
    text: z.string().describe("The text of the search result."),
    url: z.string().describe("The url of the search result."),
});

export const GetRelevantQuestionsSchema = z.object({
    query: z.string().describe("The query to get relevant data questions for, this could be a high level task or question the user is asking or hoping to get answered. Do minimal processing of the original question. You can even pass the complete raw query as it is, the system is smart to make sense of it as it has access to the entire schema. Do not add analytical hints or directions."),
    additionalContext: z.string()
        .describe("Additional context to add to the query, this might be older data returned for previous questions or any other relevant context that might help the system generate better questions.")
        .optional(),
    datasourceIds: z.array(z.string())
        .describe("The datasources to get questions for, this is the ids of the datasources to get data from. Each id is a GUID string.")
});

export const GetAnswerSchema = z.object({
    question: z.string().describe("The question to get the answer for, these are generally the questions generated by the getRelevantQuestions tool."),
    datasourceId: z.string()
        .describe("The datasource to get the answer for, this is the id of the datasource to get data from")
});

export const CreateLiveboardSchema = z.object({
    name: z.string().describe("The name of the liveboard to create"),
    answers: z.array(z.object({
        question: z.string(),
        session_identifier: z.string(),
        generation_number: z.number(),
    })).describe("The answers to create the liveboard from, these are the answers generated by the getAnswer tool."),
    noteTile: z.string().describe(`
        Create a summary of the answers to the queries asked by the user along with all the analysis done on the data.
        The output format is an html note tile which can have custom styles and formatting. Use emojis, styling and icons to make it more visually appealing.
        Follow these MANDATORY rules for styling:
        - Put the whole note tile in a single line and no line breaks. Also there should be no unnecessary white spaces.
        - The html output in the note tile can have white spaces. Use <br> or <tab> if needed to use white spaces in the note tile.
        - Use padding, margin and line height to create space between the elements in the note tile and make it more readable.

        Use this as an example(ignore the line breaks and white spaces):

        <h2 class=\"theme-module__editor-h2\" dir=\"ltr\" style=\"text-align: center;\">
	        <span style=\"white-space: pre-wrap;\">\"Heading of note\"</span>
        </h2>
        <p class=\"theme-module__editor-paragraph\" dir=\"ltr\">
            <span style=\"white-space: pre-wrap;\">
                Comprehensive summary of analysis done and answers to queries asked by user. Use colors and styles in the html to make it more readable and visually appealing.
                Also add the date and time of the analysis to the note tile in the header of the note tile. The format should be like this: Generated on <date> <time>
            </span>
        </p>
        <div class=\"pinboard-note-tile-module__noteTileBg editor-module__bgNode\"></div>
        ` ),
});



export const toolDefinitionsMCPServer = [
    {
        name: ToolName.Ping,
        description: "Simple ping tool to test connectivity and Auth",
        inputSchema: zodToJsonSchema(PingSchema) as ToolInput,
        annotations: {
            title: "Test Connection",
            readOnlyHint: true,
            destructiveHint: false,
        },
    },
    {
        name: ToolName.GetRelevantQuestions,
        description: "Get relevant data questions from ThoughtSpot database",
        inputSchema: zodToJsonSchema(GetRelevantQuestionsSchema) as ToolInput,
        annotations: {
            title: "Get Relevant Questions for a Query",
            readOnlyHint: true,
            destructiveHint: false,
        },
    },
    {
        name: ToolName.GetAnswer,
        description: "Get the answer to a question from ThoughtSpot database",
        inputSchema: zodToJsonSchema(GetAnswerSchema) as ToolInput,
        annotations: {
            title: "Get Answer for a Question",
            readOnlyHint: true,
            destructiveHint: false,
        },
    },
    {
        name: ToolName.CreateLiveboard,
        description: "Create a liveboard from a list of answers",
        inputSchema: zodToJsonSchema(CreateLiveboardSchema) as ToolInput,
        annotations: {
            title: "Create Liveboard from Answers",
            readOnlyHint: true,
            destructiveHint: false,
        },
    }
];

export const toolDefinitionsOpenAIMCPServer = [
    {
        name: "search",
        description: "Tool to search for relevant data queries to answer the given question based on the datasource passed to this tool, which is a datasource id, see the query description for the syntax. The datasource id is mandatory and should be passed as part of the query. Any textual question can be passed to this tool, and it will do its best to find relevant data queries to answer the question.",
        inputSchema: zodToJsonSchema(SearchInputSchema) as ToolInput,
        outputSchema: zodToJsonSchema(SearchOutputSchema) as ToolOutput,
    },
    {
        name: "fetch",
        description: "Tool to retrieve data from the retail sales dataset for a given query.",
        inputSchema: zodToJsonSchema(fetchInputSchema) as ToolInput,
        outputSchema: zodToJsonSchema(fetchOutputSchema) as ToolOutput,
    },
];